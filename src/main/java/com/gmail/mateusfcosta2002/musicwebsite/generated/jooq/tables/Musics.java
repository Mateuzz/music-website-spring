/*
 * This file is generated by jOOQ.
 */
package com.gmail.mateusfcosta2002.musicwebsite.generated.jooq.tables;


import com.gmail.mateusfcosta2002.musicwebsite.generated.jooq.Indexes;
import com.gmail.mateusfcosta2002.musicwebsite.generated.jooq.Keys;
import com.gmail.mateusfcosta2002.musicwebsite.generated.jooq.Public;
import com.gmail.mateusfcosta2002.musicwebsite.generated.jooq.tables.Authors.AuthorsPath;
import com.gmail.mateusfcosta2002.musicwebsite.generated.jooq.tables.Categories.CategoriesPath;
import com.gmail.mateusfcosta2002.musicwebsite.generated.jooq.tables.MusicTags.MusicTagsPath;
import com.gmail.mateusfcosta2002.musicwebsite.generated.jooq.tables.MusicsTags.MusicsTagsPath;
import com.gmail.mateusfcosta2002.musicwebsite.generated.jooq.tables.Playlists.PlaylistsPath;
import com.gmail.mateusfcosta2002.musicwebsite.generated.jooq.tables.PlaylistsMusics.PlaylistsMusicsPath;
import com.gmail.mateusfcosta2002.musicwebsite.generated.jooq.tables.records.MusicsRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Musics extends TableImpl<MusicsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.musics</code>
     */
    public static final Musics MUSICS = new Musics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MusicsRecord> getRecordType() {
        return MusicsRecord.class;
    }

    /**
     * The column <code>public.musics.views_count</code>.
     */
    public final TableField<MusicsRecord, Integer> VIEWS_COUNT = createField(DSL.name("views_count"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.musics.author_id</code>.
     */
    public final TableField<MusicsRecord, Long> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.musics.category_id</code>.
     */
    public final TableField<MusicsRecord, Long> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.musics.create_date</code>.
     */
    public final TableField<MusicsRecord, OffsetDateTime> CREATE_DATE = createField(DSL.name("create_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.musics.id</code>.
     */
    public final TableField<MusicsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.musics.update_date</code>.
     */
    public final TableField<MusicsRecord, OffsetDateTime> UPDATE_DATE = createField(DSL.name("update_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.musics.name</code>.
     */
    public final TableField<MusicsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(150).nullable(false), this, "");

    /**
     * The column <code>public.musics.filepath</code>.
     */
    public final TableField<MusicsRecord, String> FILEPATH = createField(DSL.name("filepath"), SQLDataType.VARCHAR(255), this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<MusicsRecord, Object> SEARCH = createField(DSL.name("search"), DefaultDataType.getDefaultDataType("\"pg_catalog\".\"tsvector\""), this, "");

    private Musics(Name alias, Table<MusicsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Musics(Name alias, Table<MusicsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.musics</code> table reference
     */
    public Musics(String alias) {
        this(DSL.name(alias), MUSICS);
    }

    /**
     * Create an aliased <code>public.musics</code> table reference
     */
    public Musics(Name alias) {
        this(alias, MUSICS);
    }

    /**
     * Create a <code>public.musics</code> table reference
     */
    public Musics() {
        this(DSL.name("musics"), null);
    }

    public <O extends Record> Musics(Table<O> path, ForeignKey<O, MusicsRecord> childPath, InverseForeignKey<O, MusicsRecord> parentPath) {
        super(path, childPath, parentPath, MUSICS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class MusicsPath extends Musics implements Path<MusicsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> MusicsPath(Table<O> path, ForeignKey<O, MusicsRecord> childPath, InverseForeignKey<O, MusicsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private MusicsPath(Name alias, Table<MusicsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public MusicsPath as(String alias) {
            return new MusicsPath(DSL.name(alias), this);
        }

        @Override
        public MusicsPath as(Name alias) {
            return new MusicsPath(alias, this);
        }

        @Override
        public MusicsPath as(Table<?> alias) {
            return new MusicsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.MUSICS_SEARCH_IDX);
    }

    @Override
    public UniqueKey<MusicsRecord> getPrimaryKey() {
        return Keys.MUSICS_PKEY;
    }

    @Override
    public List<ForeignKey<MusicsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MUSICS__FKDIAR1U91WFI42XMG6VFL74N56, Keys.MUSICS__FK7EHFCD0BQHA5UAT6VRO7Y5OKI);
    }

    private transient AuthorsPath _authors;

    /**
     * Get the implicit join path to the <code>public.authors</code> table.
     */
    public AuthorsPath authors() {
        if (_authors == null)
            _authors = new AuthorsPath(this, Keys.MUSICS__FKDIAR1U91WFI42XMG6VFL74N56, null);

        return _authors;
    }

    private transient CategoriesPath _categories;

    /**
     * Get the implicit join path to the <code>public.categories</code> table.
     */
    public CategoriesPath categories() {
        if (_categories == null)
            _categories = new CategoriesPath(this, Keys.MUSICS__FK7EHFCD0BQHA5UAT6VRO7Y5OKI, null);

        return _categories;
    }

    private transient MusicsTagsPath _musicsTags;

    /**
     * Get the implicit to-many join path to the <code>public.musics_tags</code>
     * table
     */
    public MusicsTagsPath musicsTags() {
        if (_musicsTags == null)
            _musicsTags = new MusicsTagsPath(this, null, Keys.MUSICS_TAGS__FKGO2PDEEQN31AUEGJK2B490LE6.getInverseKey());

        return _musicsTags;
    }

    private transient PlaylistsMusicsPath _playlistsMusics;

    /**
     * Get the implicit to-many join path to the
     * <code>public.playlists_musics</code> table
     */
    public PlaylistsMusicsPath playlistsMusics() {
        if (_playlistsMusics == null)
            _playlistsMusics = new PlaylistsMusicsPath(this, null, Keys.PLAYLISTS_MUSICS__FKCKS57CNN25VMIOLLWS9LUORYO.getInverseKey());

        return _playlistsMusics;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.music_tags</code> table
     */
    public MusicTagsPath musicTags() {
        return musicsTags().musicTags();
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.playlists</code> table
     */
    public PlaylistsPath playlists() {
        return playlistsMusics().playlists();
    }

    @Override
    public Musics as(String alias) {
        return new Musics(DSL.name(alias), this);
    }

    @Override
    public Musics as(Name alias) {
        return new Musics(alias, this);
    }

    @Override
    public Musics as(Table<?> alias) {
        return new Musics(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Musics rename(String name) {
        return new Musics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Musics rename(Name name) {
        return new Musics(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Musics rename(Table<?> name) {
        return new Musics(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Musics where(Condition condition) {
        return new Musics(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Musics where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Musics where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Musics where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Musics where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Musics where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Musics where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Musics where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Musics whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Musics whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
