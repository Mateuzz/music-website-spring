/*
 * This file is generated by jOOQ.
 */
package com.gmail.mateusfcosta2002.musicwebsite.generated.jooq.tables;


import com.gmail.mateusfcosta2002.musicwebsite.generated.jooq.Indexes;
import com.gmail.mateusfcosta2002.musicwebsite.generated.jooq.Keys;
import com.gmail.mateusfcosta2002.musicwebsite.generated.jooq.Public;
import com.gmail.mateusfcosta2002.musicwebsite.generated.jooq.tables.Musics.MusicsPath;
import com.gmail.mateusfcosta2002.musicwebsite.generated.jooq.tables.MusicsTags.MusicsTagsPath;
import com.gmail.mateusfcosta2002.musicwebsite.generated.jooq.tables.records.MusicTagsRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MusicTags extends TableImpl<MusicTagsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.music_tags</code>
     */
    public static final MusicTags MUSIC_TAGS = new MusicTags();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MusicTagsRecord> getRecordType() {
        return MusicTagsRecord.class;
    }

    /**
     * The column <code>public.music_tags.id</code>.
     */
    public final TableField<MusicTagsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.music_tags.name</code>.
     */
    public final TableField<MusicTagsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    private MusicTags(Name alias, Table<MusicTagsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private MusicTags(Name alias, Table<MusicTagsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.music_tags</code> table reference
     */
    public MusicTags(String alias) {
        this(DSL.name(alias), MUSIC_TAGS);
    }

    /**
     * Create an aliased <code>public.music_tags</code> table reference
     */
    public MusicTags(Name alias) {
        this(alias, MUSIC_TAGS);
    }

    /**
     * Create a <code>public.music_tags</code> table reference
     */
    public MusicTags() {
        this(DSL.name("music_tags"), null);
    }

    public <O extends Record> MusicTags(Table<O> path, ForeignKey<O, MusicTagsRecord> childPath, InverseForeignKey<O, MusicTagsRecord> parentPath) {
        super(path, childPath, parentPath, MUSIC_TAGS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class MusicTagsPath extends MusicTags implements Path<MusicTagsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> MusicTagsPath(Table<O> path, ForeignKey<O, MusicTagsRecord> childPath, InverseForeignKey<O, MusicTagsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private MusicTagsPath(Name alias, Table<MusicTagsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public MusicTagsPath as(String alias) {
            return new MusicTagsPath(DSL.name(alias), this);
        }

        @Override
        public MusicTagsPath as(Name alias) {
            return new MusicTagsPath(alias, this);
        }

        @Override
        public MusicTagsPath as(Table<?> alias) {
            return new MusicTagsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDXGU7JS9MH96HPEQM6EH7SP2K56);
    }

    @Override
    public UniqueKey<MusicTagsRecord> getPrimaryKey() {
        return Keys.MUSIC_TAGS_PKEY;
    }

    private transient MusicsTagsPath _musicsTags;

    /**
     * Get the implicit to-many join path to the <code>public.musics_tags</code>
     * table
     */
    public MusicsTagsPath musicsTags() {
        if (_musicsTags == null)
            _musicsTags = new MusicsTagsPath(this, null, Keys.MUSICS_TAGS__FK4I4QWSOVXBKRWJFN0UNW5NNIJ.getInverseKey());

        return _musicsTags;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.musics</code>
     * table
     */
    public MusicsPath musics() {
        return musicsTags().musics();
    }

    @Override
    public MusicTags as(String alias) {
        return new MusicTags(DSL.name(alias), this);
    }

    @Override
    public MusicTags as(Name alias) {
        return new MusicTags(alias, this);
    }

    @Override
    public MusicTags as(Table<?> alias) {
        return new MusicTags(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MusicTags rename(String name) {
        return new MusicTags(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MusicTags rename(Name name) {
        return new MusicTags(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MusicTags rename(Table<?> name) {
        return new MusicTags(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MusicTags where(Condition condition) {
        return new MusicTags(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MusicTags where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MusicTags where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MusicTags where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MusicTags where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MusicTags where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MusicTags where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MusicTags where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MusicTags whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MusicTags whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
